import telebot
from telebot import types
from telebot.apihelper import ApiException
import time
import io
import pandas as pd
from datetime import datetime
import queue
import threading
from time import sleep
from config import WEBSITE_URL
from psycopg2.extras import RealDictCursor
registr = None
bot = None
db = None 
user_temp_data = {}
admin_temp_data = {}
message_queue = queue.Queue()
last_message_time = {}
def init_main_menu(bot_instance, registr_module, db_instance):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    global bot, registr, db
    bot = bot_instance
    registr = registr_module
    db = db_instance

def clear_chat_history_optimized(message, count):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    current_message_id = message.message_id
    deleted_count = 0
    
    for message_id in range(current_message_id, max(1, current_message_id - count), -1):
        try:
            bot.delete_message(chat_id=chat_id, message_id=message_id)
            deleted_count += 1
        except ApiException as e:
            if "message to delete not found" in str(e).lower():
                continue
            elif "message can't be deleted" in str(e).lower():
                continue
            elif "too many requests" in str(e).lower():
                time.sleep(0.3)
                continue
        except Exception:
            continue
def register_main_menu_handlers(bot_instance):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global bot
    bot = bot_instance

    # ========== –ü–û–ò–°–ö –£–ß–ê–°–¢–ù–ò–ö–û–í ==========
    @bot.callback_query_handler(func=lambda call: call.data == "btn_search_part")
    def callback_search_participants(call):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üîç –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
        
        bot.register_next_step_handler(call.message, search_participant_handler)

    def search_participant_handler(message):
        bot.delete_message(message.chat.id, message.message_id)
        clear_chat_history_optimized(message, 2)
        search_term = message.text.strip()
        
        participants = db.search_participants(search_term)
        
        keyboard = types.InlineKeyboardMarkup()
        
        if participants:
            text = f"üîç –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            for participant in participants:
                keyboard.add(types.InlineKeyboardButton(
                    f"{participant['fio']}", 
                    callback_data=f"search_participant_{participant['id']}"
                ))
        else:
            text = "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        safe_send_message(message.chat.id, text, reply_markup=keyboard)
    @bot.callback_query_handler(func=lambda call: call.data == "statistics")
    def callback_statistics(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = db.get_statistics()
        
        if not stats:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=keyboard
            )
            return
        
        text = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:\n\n"
        text += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total']}\n"
        text += f"üìÖ 24 –æ–∫—Ç—è–±—Ä—è: {stats['oct_24']} —á–µ–ª–æ–≤–µ–∫\n"
        text += f"üìÖ 25 –æ–∫—Ç—è–±—Ä—è: {stats['oct_25']} —á–µ–ª–æ–≤–µ–∫\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚è∞ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="stats_time"))
        keyboard.add(types.InlineKeyboardButton("üéÇ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="stats_age"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    @bot.callback_query_handler(func=lambda call: call.data == "download_data_ask")
    def callback_download_questions(call):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≤–æ–ø—Ä–æ—Å—ã (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ)
            connection = db.get_connection()
            with connection.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("SELECT * FROM questions ORDER BY created_at DESC;")
                questions = cursor.fetchall()
            db.put_connection(connection)
            
            if not questions:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="üìä –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞",
                    reply_markup=keyboard
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame([dict(q) for q in questions])
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            column_mapping = {
                'id': 'ID',
                'telegram_id': 'ID –¢–µ–ª–µ–≥—Ä–∞–º–º–∞',
                'username': 'Username',
                'full_name': '–§–ò–û',
                'question_text': '–í–æ–ø—Ä–æ—Å',
                'answer_text': '–û—Ç–≤–µ—Ç',
                'is_answered': '–û—Ç–≤–µ—á–µ–Ω',
                'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                'answered_at': '–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞'
            }
            df = df.rename(columns=column_mapping)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–í–æ–ø—Ä–æ—Å—ã', index=False)
            
            output.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            current_date = datetime.now().strftime("%Y-%m-%d_%H-%M")
            filename = f"questions_{current_date}.xlsx"
            clear_chat_history_optimized(call.message, 1)
            bot.send_document(
                call.message.chat.id,
                document=output,
                visible_file_name=filename,
                caption=f"üìä –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤\nüí¨ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}"
            )
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                call.message.chat.id,
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                reply_markup=keyboard
            )
            
        except Exception as e:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                call.message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                reply_markup=keyboard
            )
    @bot.callback_query_handler(func=lambda call: call.data == "stats_time")
    def callback_statistics_time(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        time_stats = db.get_time_statistics()
        
        if not time_stats:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics"))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
                reply_markup=keyboard
            )
            return
        
        text = "‚è∞ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n"
        
        # 24 –æ–∫—Ç—è–±—Ä—è
        text += "üìÖ 24 –æ–∫—Ç—è–±—Ä—è:\n"
        standard_times = ["12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]
        for time in standard_times:
            count = time_stats['oct_24'].get(time, 0)
            if count > 0:
                text += f"  {time} - {count} —á–µ–ª.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è 24 –æ–∫—Ç—è–±—Ä—è
        for time, count in sorted(time_stats['oct_24'].items()):
            if time not in standard_times and count > 0:
                text += f"  {time} - {count} —á–µ–ª.\n"
        
        text += "\n"
        
        # 25 –æ–∫—Ç—è–±—Ä—è
        text += "üìÖ 25 –æ–∫—Ç—è–±—Ä—è:\n"
        for time in standard_times:
            count = time_stats['oct_25'].get(time, 0)
            if count > 0:
                text += f"  {time} - {count} —á–µ–ª.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è 25 –æ–∫—Ç—è–±—Ä—è
        for time, count in sorted(time_stats['oct_25'].items()):
            if time not in standard_times and count > 0:
                text += f"  {time} - {count} —á–µ–ª.\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "stats_age")
    def callback_statistics_age(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
        age_stats = db.get_age_statistics()
        
        if not age_stats:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics"))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
                reply_markup=keyboard
            )
            return
        
        text = "üéÇ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:\n\n"
        
        for item in age_stats:
            age = item['age']
            count = item['count']
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—á–µ–ª–æ–≤–µ–∫"
            if count % 10 == 1 and count % 100 != 11:
                word = "—á–µ–ª–æ–≤–µ–∫"
            elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
                word = "—á–µ–ª–æ–≤–µ–∫–∞"
            else:
                word = "—á–µ–ª–æ–≤–µ–∫"
            
            text += f"{age} –ª–µ—Ç: {count} {word}\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    # ========== –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ==========
    @bot.callback_query_handler(func=lambda call: call.data == "personal_cabinet")
    def callback_personal_cabinet(call):
        user_id = call.from_user.id
        participants = db.get_participants_by_registrator(user_id)
        
        keyboard = types.InlineKeyboardMarkup()
        
        if participants:
            text = f"üë§ –í–∞—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}):\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            for participant in participants:
                keyboard.add(types.InlineKeyboardButton(
                    f"{participant['fio']}", 
                    callback_data=f"participant_{participant['id']}"
                ))
        else:
            text = "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        keyboard.add(types.InlineKeyboardButton("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å", callback_data="btn_new_part"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    @bot.callback_query_handler(func=lambda call: call.data.startswith("search_participant_"))
    def callback_search_participant_info(call):
        participant_id = int(call.data.split("_")[2])
        participant = db.get_participant_by_id(participant_id)
        
        if not participant:
            bot.answer_callback_query(call.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"search_edit_{participant_id}"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="btn_search_part"))
        
        text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ:\n\n"
        text += f"üë§ –§–ò–û: {participant['fio']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: {participant['date_fest']}\n"
        text += f"üïê –í—Ä–µ–º—è: {participant['time_fest']}\n"
        text += f"üë• –ü–æ–ª: {participant['gender']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {participant['date_of_birth']}\n"
        text += f"üè∑ –°—Ç–∞—Ç—É—Å: {participant['status']}\n"
        text += f"üåç –†–µ–≥–∏–æ–Ω: {participant['region']}\n"
        text += f"üè† –ì–æ—Ä–æ–¥: {participant['city']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant['number']}\n"
        text += f"üìã ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: {participant['id']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {participant['created_at'].strftime('%d.%m.%Y %H:%M')}"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("search_edit_"))
    def callback_search_edit_participant(call):
        participant_id = int(call.data.split("_")[2])
        participant = db.get_participant_by_id(participant_id)
        
        if not participant:
            bot.answer_callback_query(call.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        admin_temp_data[call.from_user.id] = {'editing_participant_id': participant_id, 'from_search': True}
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–§–ò–û", callback_data="edit_field_fio"))
        keyboard.add(types.InlineKeyboardButton("–î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è", callback_data="edit_field_date_fest"))
        keyboard.add(types.InlineKeyboardButton("–í—Ä–µ–º—è", callback_data="edit_field_time_fest"))
        keyboard.add(types.InlineKeyboardButton("–ü–æ–ª", callback_data="edit_field_gender"))
        keyboard.add(types.InlineKeyboardButton("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_field_date_of_birth"))
        keyboard.add(types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="edit_field_status"))
        keyboard.add(types.InlineKeyboardButton("–†–µ–≥–∏–æ–Ω", callback_data="edit_field_region"))
        keyboard.add(types.InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="edit_field_city"))
        keyboard.add(types.InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field_number"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_participant_{participant_id}"))
        
        text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ:\n\n"
        text += f"üë§ –§–ò–û: {participant['fio']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: {participant['date_fest']}\n"
        text += f"üïê –í—Ä–µ–º—è: {participant['time_fest']}\n"
        text += f"üë• –ü–æ–ª: {participant['gender']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {participant['date_of_birth']}\n"
        text += f"üè∑ –°—Ç–∞—Ç—É—Å: {participant['status']}\n"
        text += f"üåç –†–µ–≥–∏–æ–Ω: {participant['region']}\n"
        text += f"üè† –ì–æ—Ä–æ–¥: {participant['city']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant['number']}\n\n"
        text += "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    @bot.callback_query_handler(func=lambda call: call.data.startswith("participant_"))
    def callback_participant_info(call):
        participant_id = int(call.data.split("_")[1])
        participant = db.get_participant_by_id(participant_id)
        
        if not participant:
            bot.answer_callback_query(call.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if participant['registrator_id'] != call.from_user.id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"edit_{participant_id}"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="personal_cabinet"))
        
        text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ:\n\n"
        text += f"üë§ –§–ò–û: {participant['fio']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: {participant['date_fest']}\n"
        text += f"üïê –í—Ä–µ–º—è: {participant['time_fest']}\n"
        text += f"üë• –ü–æ–ª: {participant['gender']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {participant['date_of_birth']}\n"
        text += f"üè∑ –°—Ç–∞—Ç—É—Å: {participant['status']}\n"
        text += f"üåç –†–µ–≥–∏–æ–Ω: {participant['region']}\n"
        text += f"üè† –ì–æ—Ä–æ–¥: {participant['city']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant['number']}\n"
        text += f"üìã ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: {participant['id']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {participant['created_at'].strftime('%d.%m.%Y %H:%M')}"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_") and not call.data.startswith("edit_field_"))
    def callback_edit_participant(call):
        participant_id = int(call.data.split("_")[1])
        participant = db.get_participant_by_id(participant_id)
        
        if not participant or participant['registrator_id'] != call.from_user.id:
            bot.answer_callback_query(call.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        admin_temp_data[call.from_user.id] = {'editing_participant_id': participant_id}
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–§–ò–û", callback_data="edit_field_fio"))
        keyboard.add(types.InlineKeyboardButton("–î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è", callback_data="edit_field_date_fest"))
        keyboard.add(types.InlineKeyboardButton("–í—Ä–µ–º—è", callback_data="edit_field_time_fest"))
        keyboard.add(types.InlineKeyboardButton("–ü–æ–ª", callback_data="edit_field_gender"))
        keyboard.add(types.InlineKeyboardButton("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_field_date_of_birth"))
        keyboard.add(types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="edit_field_status"))
        keyboard.add(types.InlineKeyboardButton("–†–µ–≥–∏–æ–Ω", callback_data="edit_field_region"))
        keyboard.add(types.InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="edit_field_city"))
        keyboard.add(types.InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field_number"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"participant_{participant_id}"))
        
        text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ:\n\n"
        text += f"üë§ –§–ò–û: {participant['fio']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: {participant['date_fest']}\n"
        text += f"üïê –í—Ä–µ–º—è: {participant['time_fest']}\n"
        text += f"üë• –ü–æ–ª: {participant['gender']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {participant['date_of_birth']}\n"
        text += f"üè∑ –°—Ç–∞—Ç—É—Å: {participant['status']}\n"
        text += f"üåç –†–µ–≥–∏–æ–Ω: {participant['region']}\n"
        text += f"üè† –ì–æ—Ä–æ–¥: {participant['city']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant['number']}\n\n"
        text += "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_field_"))
    def callback_edit_field(call):
        field = call.data.split("edit_field_")[1]
        admin_id = call.from_user.id
        
        if admin_id not in admin_temp_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        participant_id = admin_temp_data[admin_id]['editing_participant_id']
        admin_temp_data[admin_id]['editing_field'] = field
        
        keyboard = types.InlineKeyboardMarkup()
        if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
        else:
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
        
        field_names = {
            'fio': '–§–ò–û',
            'date_fest': '–¥–∞—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è',
            'time_fest': '–≤—Ä–µ–º—è',
            'gender': '–ø–æ–ª',
            'date_of_birth': '–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
            'status': '—Å—Ç–∞—Ç—É—Å',
            'region': '—Ä–µ–≥–∏–æ–Ω',
            'city': '–≥–æ—Ä–æ–¥',
            'number': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        }
        
        if field == 'gender':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="update_gender_–ú—É–∂—Å–∫–æ–π"))
            keyboard.add(types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="update_gender_–ñ–µ–Ω—Å–∫–∏–π"))
            if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
            else:
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª:"
        elif field == 'status':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="update_status_–†–æ–¥–∏—Ç–µ–ª—å"))
            keyboard.add(types.InlineKeyboardButton("–†–µ–±–µ–Ω–æ–∫", callback_data="update_status_–†–µ–±–µ–Ω–æ–∫"))
            keyboard.add(types.InlineKeyboardButton("–ü–µ–¥–∞–≥–æ–≥", callback_data="update_status_–ü–µ–¥–∞–≥–æ–≥"))
            keyboard.add(types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="update_status_–°—Ç—É–¥–µ–Ω—Ç"))
            keyboard.add(types.InlineKeyboardButton("–í–∑—Ä–æ—Å–ª—ã–π", callback_data="update_status_–í–∑—Ä–æ—Å–ª—ã–π"))
            if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
            else:
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
        elif field == 'date_fest':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("24 –æ–∫—Ç—è–±—Ä—è", callback_data="update_date_fest_24 –æ–∫—Ç—è–±—Ä—è"))
            keyboard.add(types.InlineKeyboardButton("25 –æ–∫—Ç—è–±—Ä—è", callback_data="update_date_fest_25 –æ–∫—Ç—è–±—Ä—è"))
            keyboard.add(types.InlineKeyboardButton("24-25 –æ–∫—Ç—è–±—Ä—è", callback_data="update_date_fest_24-25 –æ–∫—Ç—è–±—Ä—è"))
            if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
            else:
                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:"
        elif field == 'time_fest':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ date_fest
            participant = db.get_participant_by_id(participant_id)
            
            if participant['date_fest'] == '24-25 –æ–∫—Ç—è–±—Ä—è':
                # –î–ª—è –¥–≤—É—Ö–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("13:00", callback_data="update_time1_13:00"))
                keyboard.add(types.InlineKeyboardButton("14:00", callback_data="update_time1_14:00"))
                keyboard.add(types.InlineKeyboardButton("15:00", callback_data="update_time1_15:00"))
                keyboard.add(types.InlineKeyboardButton("16:00", callback_data="update_time1_16:00"))
                keyboard.add(types.InlineKeyboardButton("17:00", callback_data="update_time1_17:00"))
                keyboard.add(types.InlineKeyboardButton("18:00", callback_data="update_time1_18:00"))
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è 24 –æ–∫—Ç—è–±—Ä—è:"
            else:
                # –î–ª—è –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∫–∞–∫ —Å–µ–π—á–∞—Å
                text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names[field]}':"
                bot.register_next_step_handler(call.message, edit_field_handler, admin_id, field)
        else:
            text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names[field]}':"
            bot.register_next_step_handler(call.message, edit_field_handler, admin_id, field)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
    @bot.callback_query_handler(func=lambda call: call.data.startswith("update_gender_"))
    def callback_update_gender(call):
        new_value = call.data.split("update_gender_")[1]
        update_field_value(call, 'gender', new_value)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("update_status_"))
    def callback_update_status(call):
        new_value = call.data.split("update_status_")[1]
        update_field_value(call, 'status', new_value)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("update_date_fest_"))
    def callback_update_date_fest(call):
        new_value = call.data.split("update_date_fest_")[1]
        update_field_value(call, 'date_fest', new_value)

    def update_field_value(call, field, new_value):
        admin_id = call.from_user.id
        if admin_id not in admin_temp_data:
            return
        
        participant_id = admin_temp_data[admin_id]['editing_participant_id']
        
        if db.update_participant_field(participant_id, field, new_value):
            
            success_text = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
        else:
            success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = types.InlineKeyboardMarkup()
        if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
        else:
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=success_text,
            reply_markup=keyboard
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if admin_id in admin_temp_data:
            del admin_temp_data[admin_id]
    # ========== –°–ö–ê–ß–ê–¢–¨ –î–ê–ù–ù–´–ï ==========
    @bot.callback_query_handler(func=lambda call: call.data == "download_data")
    def callback_download_data(call):
        try:
            participants = db.get_all_participants()
            
            if not participants:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞",
                    reply_markup=keyboard
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(participants)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            column_mapping = {
                'id': 'ID',
                'fio': '–§–ò–û',
                'date_fest': '–î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è',
                'time_fest': '–í—Ä–µ–º—è',
                'gender': '–ü–æ–ª',
                'date_of_birth': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
                'status': '–°—Ç–∞—Ç—É—Å',
                'region': '–†–µ–≥–∏–æ–Ω',
                'city': '–ì–æ—Ä–æ–¥',
                'number': '–¢–µ–ª–µ—Ñ–æ–Ω',
                'created_at': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                'telegram_id': 'ID –¢–µ–ª–µ–≥—Ä–∞–º–º–∞'
            }
            df = df.rename(columns=column_mapping)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–£—á–∞—Å—Ç–Ω–∏–∫–∏', index=False)
            
            output.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            current_date = datetime.now().strftime("%Y-%m-%d_%H-%M")
            filename = f"festival_participants_{current_date}.xlsx"
            clear_chat_history_optimized(call.message, 1)
            bot.send_document(
                call.message.chat.id,
                document=output,
                visible_file_name=filename,
                caption=f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\nüë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
            )
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                call.message.chat.id,
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                reply_markup=keyboard
            )
            
        except Exception as e:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                call.message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                reply_markup=keyboard
            )

    # ========== –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–° ==========
    @bot.callback_query_handler(func=lambda call: call.data == "ask_quest")
    def callback_ask_question(call):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=keyboard
        )
        
        bot.register_next_step_handler(call.message, ask_question_handler)

    def ask_question_handler(message):
        bot.delete_message(message.chat.id, message.message_id)
        
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        question_text = message.text.strip()
        
        question_id = db.save_question(user_id, username, full_name, question_text)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        if question_id:
            text1 = f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\nüìã –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: {question_id}\n\nüí¨ –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        else:
            text1 = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        clear_chat_history_optimized(message, 2)
        safe_send_message(
            chat_id=1385548872,
            text = '–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"', 
            reply_markup=keyboard)
        safe_send_message(
            chat_id=message.chat.id,
            text = text1, 
            reply_markup=keyboard)

    # ========== –û–¢–í–ï–¢–ò–¢–¨ –ù–ê –í–û–ü–†–û–° ==========
    @bot.callback_query_handler(func=lambda call: call.data == "answer_quest")
    def callback_answer_questions(call):
        questions = db.get_unanswered_questions()
        
        keyboard = types.InlineKeyboardMarkup()
        
        if questions:
            keyboard.add(types.InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_questions"))
        
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        text = f"üí¨ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "view_questions")
    def callback_view_questions(call):
        questions = db.get_unanswered_questions()
        
        if not questions:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã!",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        text = "üìù –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        keyboard = types.InlineKeyboardMarkup()
        
        for i, question in enumerate(questions[:5], 1):
            text += f"{i}. –û—Ç: {question['full_name']} (@{question['username'] or '–±–µ–∑ username'})\n"
            text += f"‚ùì {question['question_text'][:100]}...\n"
            text += f"üìÖ {question['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            
            keyboard.add(types.InlineKeyboardButton(
                f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å {i}", 
                callback_data=f"answer_{question['id']}"
            ))
        
        if len(questions) > 5:
            text += f"... –∏ –µ—â–µ {len(questions) - 5} –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
    def callback_answer_specific_question(call):
        question_id = int(call.data.split("_")[1])
        question = db.get_question_by_id(question_id)
        
        if not question:
            bot.answer_callback_query(call.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        admin_temp_data[call.from_user.id] = {'question_id': question_id}
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_questions"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        text = f"‚ùì –í–æ–ø—Ä–æ—Å #{question['id']}\n"
        text += f"–û—Ç: {question['full_name']} (@{question['username'] or '–±–µ–∑ username'})\n"
        text += f"üìÖ {question['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"üí¨ –í–æ–ø—Ä–æ—Å: {question['question_text']}\n\n"
        text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard
        )
        
        bot.register_next_step_handler(call.message, answer_question_handler, call.from_user.id)

    def answer_question_handler(message, admin_id):
        bot.delete_message(message.chat.id, message.message_id)
        
        if admin_id not in admin_temp_data:
            return
        
        question_id = admin_temp_data[admin_id]['question_id']
        answer_text = message.text.strip()
        
        question = db.get_question_by_id(question_id)
        if not question:
            safe_send_message(message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.answer_question(question_id, answer_text):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                safe_send_message(
                    question['telegram_id'],
                    f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{question_id}:\n\n"
                    f"‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: {question['question_text']}\n\n"
                    f"üí¨ –û—Ç–≤–µ—Ç: {answer_text}"
                )
                success_text = "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"
            except:
                success_text = "‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        else:
            success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞"
        time.sleep(1)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_questions"))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        safe_send_message(message.chat.id, success_text, reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if admin_id in admin_temp_data:
            del admin_temp_data[admin_id]

    # ========== –†–ê–°–°–´–õ–ö–ê ==========
    @bot.callback_query_handler(func=lambda call: call.data == "mailing")
    def callback_mailing(call):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        
        participants_count = db.get_participants_count()
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {participants_count}\n\n‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=keyboard
        )
        
        bot.register_next_step_handler(call.message, mailing_content_handler, call.from_user.id)
    @bot.callback_query_handler(func=lambda call: call.data == "send_message")
    def callback_send_personal_message(call):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìã –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboard
        )
        
        bot.register_next_step_handler(call.message, personal_message_id_handler, call.from_user.id)

    def personal_message_id_handler(message, admin_id):
        bot.delete_message(message.chat.id, message.message_id)
        
        try:
            target_id = int(message.text.strip())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            admin_temp_data[admin_id] = {'target_telegram_id': target_id}
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            
            clear_chat_history_optimized(message, 2)
            safe_send_message(
                message.chat.id,
                f"‚úÖ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {target_id}\n\n‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
            bot.register_next_step_handler(message, personal_message_text_handler, admin_id)
            
        except ValueError:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            
            clear_chat_history_optimized(message, 2)
            safe_send_message(
                message.chat.id,
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:",
                reply_markup=keyboard
            )
            bot.register_next_step_handler(message, personal_message_id_handler, admin_id)

    def personal_message_text_handler(message, admin_id):
        bot.delete_message(message.chat.id, message.message_id)
        
        if admin_id not in admin_temp_data:
            return
        
        target_id = admin_temp_data[admin_id]['target_telegram_id']
        message_text = message.text.strip()
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        try:
            safe_send_message(
                target_id,
                f"üì¨ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
            )
            
            clear_chat_history_optimized(message, 2)
            safe_send_message(
                message.chat.id,
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}!",
                reply_markup=keyboard
            )
            
        except Exception as e:
            clear_chat_history_optimized(message, 2)
            safe_send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                reply_markup=keyboard
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if admin_id in admin_temp_data:
            del admin_temp_data[admin_id]
    def mailing_content_handler(message, admin_id):
        bot.delete_message(message.chat.id, message.message_id)
        
        telegram_ids = db.get_all_telegram_ids()
        
        if not telegram_ids:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                reply_markup=keyboard
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = message.content_type
        content_data = {}
        
        if content_type == 'text':
            content_data = {
                'type': 'text',
                'text': message.text,
                'preview': f"üìù –¢–µ–∫—Å—Ç: {message.text[:100]}{'...' if len(message.text) > 100 else ''}"
            }
        elif content_type == 'photo':
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            content_data = {
                'type': 'photo',
                'file_id': photo.file_id,
                'caption': message.caption or '',
                'preview': f"üì∏ –§–æ—Ç–æ{' —Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...' if message.caption else ''}"
            }
        elif content_type == 'document':
            document = message.document
            content_data = {
                'type': 'document',
                'file_id': document.file_id,
                'caption': message.caption or '',
                'filename': document.file_name,
                'preview': f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document.file_name}{' —Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...' if message.caption else ''}"
            }
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
            safe_send_message(
                message.chat.id,
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_mailing"))
        keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="callback_start"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        admin_temp_data[admin_id] = {
            'content_data': content_data,
            'telegram_ids': telegram_ids
        }
        
        preview_text = f"üì¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        preview_text += f"{content_data['preview']}\n\n"
        preview_text += f"üë• –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(telegram_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        preview_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
        clear_chat_history_optimized(message, 3)
        safe_send_message(message.chat.id, preview_text, reply_markup=keyboard)
    @bot.callback_query_handler(func=lambda call: call.data.startswith("update_time1_"))
    def callback_update_time1(call):
        """–ü–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è 24-25 –æ–∫—Ç—è–±—Ä—è (24 –æ–∫—Ç—è–±—Ä—è)"""
        time1 = call.data.split("update_time1_")[1]
        admin_id = call.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        admin_temp_data[admin_id]['time1'] = time1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("15:00", callback_data="update_time2_15:00"))
        keyboard.add(types.InlineKeyboardButton("16:00", callback_data="update_time2_16:00"))
        keyboard.add(types.InlineKeyboardButton("17:00", callback_data="update_time2_17:00"))
        keyboard.add(types.InlineKeyboardButton("18:00", callback_data="update_time2_18:00"))
        participant_id = admin_temp_data[admin_id]['editing_participant_id']
        if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
        else:
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –¥–ª—è 24 –æ–∫—Ç—è–±—Ä—è: {time1}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è 25 –æ–∫—Ç—è–±—Ä—è.\n\n–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã 12:00, 13:00, 14:00 –∑–∞–∫—Ä—ã—Ç—ã, –≤ —Å–≤—è–∑–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("update_time2_"))
    def callback_update_time2(call):
        """–í—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è 24-25 –æ–∫—Ç—è–±—Ä—è (25 –æ–∫—Ç—è–±—Ä—è)"""
        time2 = call.data.split("update_time2_")[1]
        admin_id = call.from_user.id
        
        if admin_id not in admin_temp_data or 'time1' not in admin_temp_data[admin_id]:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        time1 = admin_temp_data[admin_id]['time1']
        new_value = f"{time1};{time2}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –ë–î
        update_field_value(call, 'time_fest', new_value)
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_mailing")
    def callback_confirm_mailing(call):
        admin_id = call.from_user.id
        
        if admin_id not in admin_temp_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        mailing_data = admin_temp_data[admin_id]
        content_data = mailing_data['content_data']
        telegram_ids = mailing_data['telegram_ids']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üì§ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(telegram_ids)}"
        )
        
        sent_count = 0
        failed_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for i, telegram_id in enumerate(telegram_ids):
            try:
                if content_data['type'] == 'text':
                    safe_send_message(telegram_id, content_data['text'])
                elif content_data['type'] == 'photo':
                    bot.send_photo(telegram_id, content_data['file_id'], 
                                caption=content_data['caption'])
                elif content_data['type'] == 'document':
                    bot.send_document(telegram_id, content_data['file_id'], 
                                    caption=content_data['caption'])
                
                sent_count += 1
                
                # –î–û–ë–ê–í–ò–¢–¨ –ê–î–ê–ü–¢–ò–í–ù–£–Æ –ó–ê–î–ï–†–ñ–ö–£:
                if i % 20 == 0 and i > 0:  # –ö–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                else:
                    sleep(0.1)  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
            except Exception as e:
                if "Too Many Requests" in str(e):
                    sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                    continue
                failed_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º preview)
        message_for_db = content_data.get('text', content_data['preview'])
        db.save_mailing(admin_id, message_for_db, sent_count, failed_count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        report_text = f"üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:\n\n"
        report_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        report_text += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
        report_text += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent_count / len(telegram_ids) * 100):.1f}%"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=report_text,
            reply_markup=keyboard
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if admin_id in admin_temp_data:
            del admin_temp_data[admin_id]

    # ========== –ö–ê–ö –î–û–ë–†–ê–¢–¨–°–Ø ==========
    @bot.callback_query_handler(func=lambda call: call.data == "how_get")
    def callback_how_get(call):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        # –ó–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        location_text = """üöó –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:

üìç –ê–¥—Ä–µ—Å: –®–µ–≤—á–µ–Ω–∫–æ 47–±

üöå –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:
‚Ä¢ –ê–≤—Ç–æ–±—É—Å ‚Ññ33 –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "–ì–†–≠–°-2"
–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ï–Ω–∏—Å–µ–π—Å–∫–∞—è - –¥–∞–ª–µ–µ –ø–µ—à–∫–æ–º 700–º
–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –®–µ–≤—á–µ–Ω–∫–æ - –¥–∞–ª–µ–µ –ø–µ—à–∫–æ–º 700–º

üöó –ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:
‚Ä¢ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 56.469852, 84.990921

üö∂‚Äç‚ôÇÔ∏è –ü–µ—à–∫–æ–º –æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: 5-10 –º–∏–Ω—É—Ç

‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞"""
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=location_text,
            reply_markup=keyboard
        )

    # ========== –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –°–ê–ô–¢ ==========
    @bot.callback_query_handler(func=lambda call: call.data == "web_cite")
    def callback_web_site(call):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=WEBSITE_URL))
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="callback_start"))
        
        site_text = """üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:

–ù–∞ —Å–∞–π—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏:
‚Ä¢ üìã –ü–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–∞—Ö
‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–æ—à–ª—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç."""
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=site_text,
            reply_markup=keyboard
        )

# ========== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê ==========
def save_participant_to_db(participant_data, registrator_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–æ–¥—É–ª—è registr.py –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if db is None:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º telegram_id –≤ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
    if 'telegram_id' not in participant_data:
        participant_data['telegram_id'] = registrator_id
    
    participant_id = db.save_participant(participant_data, registrator_id)
    return participant_id

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def format_participant_info(participant):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üë§ {participant['fio']}\n"
    text += f"üìÖ {participant['date_fest']} –≤ {participant['time_fest']}\n"
    text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {participant['date_of_birth']}\n"
    text += f"üë• –ü–æ–ª: {participant['gender']}\n"
    text += f"üè∑ –°—Ç–∞—Ç—É—Å: {participant['status']}\n"
    text += f"üåç –†–µ–≥–∏–æ–Ω: {participant['region']}\n"
    text += f"üè† –ì–æ—Ä–æ–¥: {participant['city']}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {participant['number']}\n"
    text += f"üìã ID: {participant['id']}\n"
    text += f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {participant['created_at'].strftime('%d.%m.%Y %H:%M')}"
    return text

def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if db is None:
        return "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    total_participants = db.get_participants_count()
    unanswered_questions = len(db.get_unanswered_questions())
    
    stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:\n\n"
    stats += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n"
    stats += f"‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {unanswered_questions}\n"
    stats += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    return stats
def edit_field_handler(message, admin_id, field):
    #bot.delete_message(message.chat.id, message.message_id)
    
    if admin_id not in admin_temp_data:
        return
    
    participant_id = admin_temp_data[admin_id]['editing_participant_id']
    new_value = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    validation_error = None
    
    if field == 'fio':
        words = new_value.split()
        if len(words) < 2:
            clear_chat_history_optimized(message, 2)
            validation_error = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        else:
            for word in words:
                if not word[0].isupper():
                    clear_chat_history_optimized(message, 2)
                    validation_error = "–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã!\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                    break
    
    elif field == 'time_fest':
            participant_id = admin_temp_data[admin_id]['editing_participant_id']
            participant = db.get_participant_by_id(participant_id)
            if participant['date_fest'] == '24-25 –æ–∫—Ç—è–±—Ä—è':
                return
            if len(new_value) != 5 or new_value.count(':') != 1:
                clear_chat_history_optimized(message, 2)
                validation_error = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú"'
            else:
                try:
                    from datetime import datetime
                    time_obj = datetime.strptime(new_value, "%H:%M").time()
                    start_time = datetime.strptime("12:00", "%H:%M").time()
                    end_time = datetime.strptime("19:00", "%H:%M").time()
                    if not (start_time <= time_obj <= end_time):
                        clear_chat_history_optimized(message, 2)
                        validation_error = '–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 12:00 –¥–æ 19:00!'
                except ValueError:
                    clear_chat_history_optimized(message, 2)
                    validation_error = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú"'
    
    elif field == 'date_of_birth':
        try:
            from datetime import datetime
            birth_date = datetime.strptime(new_value, "%d.%m.%Y")
            current_date = datetime.now()
            if birth_date.year <= 1900:
                clear_chat_history_optimized(message, 2)
                validation_error = '–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1900!'
            elif birth_date > current_date:
                clear_chat_history_optimized(message, 2)
                validation_error = '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!'
        except ValueError:
            clear_chat_history_optimized(message, 2)
            validation_error = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì"'
    
    elif field == 'number':
        if len(new_value) != 12 or not new_value.startswith('+79') or not new_value[3:].isdigit():
            clear_chat_history_optimized(message, 2)
            validation_error = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79XXXXXXXXX"'
    
    if validation_error:
        clear_chat_history_optimized(message, 2)
        keyboard = types.InlineKeyboardMarkup()
        if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
        else:
            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
        message1 = safe_send_message(message.chat.id, validation_error, reply_markup=keyboard)
        bot.register_next_step_handler(message, edit_field_handler, admin_id, field)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if db.update_participant_field(participant_id, field, new_value):
        success_text = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
    else:
        success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    
    keyboard = types.InlineKeyboardMarkup()
    if admin_id in admin_temp_data and admin_temp_data[admin_id].get('from_search'):
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"search_participant_{participant_id}"))
    else:
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant_{participant_id}"))
    clear_chat_history_optimized(message, 2)
    safe_send_message(message.chat.id, success_text, reply_markup=keyboard)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if admin_id in admin_temp_data:
        del admin_temp_data[admin_id]

def safe_send_message(chat_id, text, reply_markup=None, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å rate limiting"""
    import time
    
    current_time = time.time()
    if chat_id in last_message_time:
        time_diff = current_time - last_message_time[chat_id]
        if time_diff < 1.0:  # –ú–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã
            sleep(1.0 - time_diff)
    
    try:
        result = bot.send_message(chat_id, text, reply_markup=reply_markup, **kwargs)  # –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ê bot.send_message
        last_message_time[chat_id] = time.time()
        return result
    except Exception as e:
        if "Too Many Requests" in str(e):
            sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            return bot.send_message(chat_id, text, reply_markup=reply_markup, **kwargs)  # –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ê bot.send_message
        raise e